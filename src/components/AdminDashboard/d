 <!-- Old  -->
 
 {(showCreateModal || showEditModal !== false) && (
        <div className="modal fade show d-block custom-modal-dark" tabIndex="-1" aria-modal="true" role="dialog">
          <div className="modal-dialog modal-lg">
            <div className="modal-content">
              <div className="modal-header">
                <h5 className="modal-title">
                  {showEditModal !== false ? 'Edit Project Details' : 'Create New Project'}
                </h5>
                <button
                  type="button"
                  className="btn-close"
                  onClick={() => {
                    setShowCreateModal(false);
                    setShowEditModal(false);
                  }}
                ></button>
              </div>
              <div className="modal-body">
                <form onSubmit={handleSubmit}>
                  {/* Basic Info Section */}
                  <div className="mb-4">
                    <h6 className="border-bottom pb-2 mb-3">Basic Information</h6>
                    <div className="row g-3">
                      <div className="col-md-8">
                        <label htmlFor="title" className="form-label">
                          Project Title *
                        </label>
                        <input
                          type="text"
                          className="form-control"
                          id="title"
                          name="title"
                          required
                          value={formData.title}
                          onChange={handleInputChange}
                        />
                      </div>
                      <div className="col-md-4">
                        <label htmlFor="client" className="form-label">
                          Client *
                        </label>
                        <select
                          className="form-select"
                          id="client"
                          name="client"
                          required
                          value={formData.client}
                          onChange={handleInputChange}
                        >
                          <option value="">Select Client</option>
                          {clientOptions.map(client => (
                            <option key={client} value={client}>{client}</option>
                          ))}
                        </select>
                      </div>
                      <div className="col-md-4">
                        <label htmlFor="country" className="form-label">
                          Country *
                        </label>
                        <select
                          className="form-select"
                          id="country"
                          name="country"
                          required
                          value={formData.country}
                          onChange={handleInputChange}
                        >
                          <option value="">Select Country</option>
                          {countryOptions.map(country => (
                            <option key={country} value={country}>{country}</option>
                          ))}
                        </select>
                      </div>
                      {isAdmin && (
                        <div className="col-md-4">
                          <label htmlFor="projectManager" className="form-label">
                            Project Manager
                          </label>
                          <select
                            className="form-select"
                            id="projectManager"
                            name="projectManager"
                            value={formData.projectManager}
                            onChange={handleInputChange}
                          >
                            <option value="">Select Project Manager</option>
                            {projectManagerOptions.map(pm => (
                              <option key={pm} value={pm}>{pm}</option>
                            ))}
                          </select>
                        </div>
                      )}
                    </div>
                  </div>

                  {/* Project Details Section */}
                  <div className="mb-4">
                    <h6 className="border-bottom pb-2 mb-3">Project Details</h6>
                    <div className="row g-3">
                      <div className="col-12">
                        <label className="form-label">Tasks *</label>
                        <div className="d-flex flex-wrap gap-2">
                          {taskOptions.map(task => (
                            <button
                              key={task}
                              type="button"
                              onClick={() => handleMultiSelectChange('tasks', task)}
                              className={`btn btn-sm ${formData.tasks.includes(task) ? 'btn-primary' : 'btn-outline-primary'}`}
                            >
                              {task}
                              {formData.tasks.includes(task) && (
                                <i className="fas fa-check ms-2"></i>
                              )}
                            </button>
                          ))}
                        </div>
                        {formData.tasks.length === 0 && (
                          <div className="text-danger small mt-1">Please select at least one task</div>
                        )}
                      </div>
                      <div className="col-12">
                        <label className="form-label">Languages *</label>
                        <div className="d-flex flex-wrap gap-2">
                          {languageOptions.map(language => (
                            <button
                              key={language}
                              type="button"
                              onClick={() => handleMultiSelectChange('languages', language)}
                              className={`btn btn-sm ${formData.languages.includes(language) ? 'btn-success' : 'btn-outline-success'}`}
                            >
                              {language}
                              {formData.languages.includes(language) && (
                                <i className="fas fa-check ms-2"></i>
                              )}
                            </button>
                          ))}
                        </div>
                        {formData.languages.length === 0 && (
                          <div className="text-danger small mt-1">Please select at least one language</div>
                        )}
                      </div>
                      <div className="col-12">
                        <label className="form-label">Application *</label>
                        <div className="d-flex flex-wrap gap-2">
                          {applicationOptions.map(application => (
                            <button
                              key={application}
                              type="button"
                              onClick={() => handleMultiSelectChange('application', application)}
                              className={`btn btn-sm ${formData.application.includes(application) ? 'btn-purple' : 'btn-outline-purple'}`}
                            >
                              {application}
                              {formData.application.includes(application) && (
                                <i className="fas fa-check ms-2"></i>
                              )}
                            </button>
                          ))}
                        </div>
                        {formData.application.length === 0 && (
                          <div className="text-danger small mt-1">Please select at least one Application</div>
                        )}
                      </div>
                    </div>
                  </div>

                  {/* File Details Section */}
                  <div className="mb-4">
                    <h6 className="border-bottom pb-2 mb-3">File Details</h6>
                    <div className="d-flex justify-content-between align-items-center mb-3">
                      <div className="btn-group">
                        <button
                          type="button"
                          className={`btn btn-sm ${showCreateModal === 'manual' ? 'btn-primary' : 'btn-outline-primary'}`}
                        >
                          Manual Input
                        </button>
                        <button
                          type="button"
                          className={`btn btn-sm ${showCreateModal === 'excel' ? 'btn-primary' : 'btn-outline-primary'}`}
                        >
                          Excel Upload
                        </button>
                      </div>
                      {showCreateModal === 'manual' && (
                        <button
                          type="button"
                          onClick={addFileRow}
                          className="btn btn-sm btn-outline-secondary"
                        >
                          <i className="fas fa-plus me-1"></i> Add File
                        </button>
                      )}
                    </div>
                    {showCreateModal === 'manual' ? (
                      <div className="table-responsive">
                        <table className="table table-bordered">
                          <thead className="bg-light">
                            <tr>
                              <th>File Name</th>
                              <th>Page Count</th>
                              <th width="50"></th>
                            </tr>
                          </thead>
                          <tbody>
                            {formData.files.map((file, index) => (
                              <tr key={index}>
                                <td>
                                  <input
                                    type="text"
                                    className="form-control form-control-sm"
                                    value={file.name}
                                    onChange={(e) => handleFileChange(index, 'name', e.target.value)}
                                    placeholder="Enter file name"
                                    required
                                  />
                                </td>
                                <td>
                                  <input
                                    type="number"
                                    min="1"
                                    className="form-control form-control-sm"
                                    value={file.pageCount || ''}
                                    onChange={(e) => handleFileChange(index, 'pageCount', e.target.value)}
                                    placeholder="Pages"
                                    required
                                  />
                                </td>
                                <td className="text-center">
                                  <button
                                    type="button"
                                    onClick={() => removeFileRow(index)}
                                    className="btn btn-sm btn-link text-danger"
                                    disabled={formData.files.length === 1}
                                  >
                                    <i className="fas fa-trash-alt"></i>
                                  </button>
                                </td>
                              </tr>
                            ))}
                          </tbody>
                        </table>
                      </div>
                    ) : (
                      <div className="border-2 border-dashed rounded p-5 text-center">
                        <i className="fas fa-file-excel text-muted fa-3x mb-3"></i>
                        <div className="mb-3">
                          <label
                            htmlFor="file-upload"
                            className="btn btn-link text-decoration-none"
                          >
                            Upload Excel file
                          </label>
                          <input id="file-upload" name="file-upload" type="file" className="d-none" />
                          <span className="text-muted">or drag and drop</span>
                        </div>
                        <p className="small text-muted">Excel files only (XLS, XLSX)</p>
                      </div>
                    )}
                    <div className="bg-light p-3 rounded mt-3">
                      <div className="d-flex justify-content-between align-items-center">
                        <div className="fw-medium">Total Pages Calculation</div>
                        <div className="text-end">
                          <div className="small text-muted">
                            {formData.files.reduce((sum, file) => sum + (file.pageCount || 0), 0)} pages × {formData.languages.length || 0} languages × {formData.tasks.length || 0} tasks
                          </div>
                          <div className="h5 fw-bold text-primary">
                            {formData.totalPages} Total Pages
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>

                  {/* Financial Section (Admin Only) */}
                  {isAdmin && (
                    <div className="mb-4">
                      <h6 className="border-bottom pb-2 mb-3">Financial Details</h6>
                      <div className="row g-3">
                        <div className="col-md-4">
                          <label htmlFor="rate" className="form-label">
                            Rate per Page
                          </label>
                          <div className="input-group">
                            <input
                              type="number"
                              className="form-control"
                              id="rate"
                              name="rate"
                              min="0"
                              step="0.01"
                              value={formData.rate || ''}
                              onChange={handleInputChange}
                              placeholder="0.00"
                            />
                            <select
                              className="form-select"
                              id="currency"
                              name="currency"
                              value={formData.currency}
                              onChange={handleInputChange}
                              style={{ maxWidth: '100px' }}
                            >
                              {currencyOptions.map(currency => (
                                <option key={currency}>{currency}</option>
                              ))}
                            </select>
                          </div>
                        </div>
                        <div className="col-md-4">
                          <label htmlFor="cost" className="form-label">
                            Total Cost
                          </label>
                          <div className="input-group">
                            <input
                              type="text"
                              className="form-control"
                              id="cost"
                              name="cost"
                              value={formData.cost.toFixed(2)}
                              readOnly
                            />
                            <span className="input-group-text">{formData.currency}</span>
                          </div>
                        </div>
                        <div className="col-md-4">
                          <label htmlFor="inrCost" className="form-label">
                            Cost in INR
                          </label>
                          <div className="input-group">
                            <input
                              type="text"
                              className="form-control"
                              id="inrCost"
                              name="inrCost"
                              value={formData.inrCost.toFixed(2)}
                              readOnly
                            />
                            <span className="input-group-text">INR</span>
                          </div>
                        </div>
                      </div>
                    </div>
                  )}

                  {/* Additional Info Section */}
                  <div className="mb-4">
                    <h6 className="border-bottom pb-2 mb-3">Additional Information</h6>
                    <div className="row g-3">
                      <div className="col-md-4">
                        <label htmlFor="receivedDate" className="form-label">
                          Received Date *
                        </label>
                        <input
                          type="date"
                          className="form-control"
                          id="receivedDate"
                          name="receivedDate"
                          required
                          value={formData.receivedDate}
                          onChange={handleInputChange}
                        />
                      </div>
                      <div className="col-12">
                        <label htmlFor="serverPath" className="form-label">
                          Server Path *
                        </label>
                        <input
                          type="text"
                          className="form-control"
                          id="serverPath"
                          name="serverPath"
                          required
                          value={formData.serverPath}
                          onChange={handleInputChange}
                          placeholder="/projects/client/project-name"
                        />
                      </div>
                      <div className="col-12">
                        <label htmlFor="notes" className="form-label">
                          Notes
                        </label>
                        <textarea
                          className="form-control"
                          id="notes"
                          name="notes"
                          rows="3"
                          value={formData.notes}
                          onChange={handleInputChange}
                          placeholder="Add any additional notes or instructions..."
                        ></textarea>
                      </div>
                    </div>
                  </div>

                  <div className="modal-footer border-top-0">
                    <button
                      type="button"
                      className="btn btn-secondary"
                      onClick={() => {
                        setShowCreateModal(false);
                        setShowEditModal(false);
                        setFormData({
                          title: '',
                          client: '',
                          country: '',
                          projectManager: '',
                          tasks: [],
                          languages: [],
                          application: [],
                          files: [{ name: '', pageCount: 0 }],
                          totalPages: 0,
                          receivedDate: new Date().toISOString().split('T')[0],
                          serverPath: '',
                          notes: '',
                          rate: 0,
                          currency: 'USD',
                          cost: 0,
                          inrCost: 0
                        });
                      }}
                    >
                      Cancel
                    </button>
                    <button
                      type="submit"
                      className="btn btn-primary"
                      disabled={
                        !formData.title ||
                        !formData.client ||
                        !formData.country ||
                        formData.tasks.length === 0 ||
                        formData.languages.length === 0 ||
                        formData.application.length === 0 ||
                        formData.files.some(file => !file.name || !file.pageCount) ||
                        !formData.serverPath
                      }
                    >
                      {showEditModal !== false ? 'Save Changes' : 'Create Project'}
                    </button>
                  </div>
                </form>
              </div>
            </div>
          </div>
        </div>
      )}